#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Struktur data untuk node buku
typedef struct Node {
    int id_buku;
    char judul[100];
    char penulis[100];
    int tahun;
    char status[20];
    char genre[50];
    int height;
    struct Node* left;
    struct Node* right;
} Node;

// Fungsi untuk mendapatkan tinggi node
int getHeight(Node* node) {
    return (node == NULL) ? 0 : node->height;
}

// Fungsi untuk mendapatkan nilai maksimum
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Fungsi untuk membuat node baru
Node* createNode(int id_buku, char* judul, char* penulis, int tahun, char* status, char* genre) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->id_buku = id_buku;
    strcpy(node->judul, judul);
    strcpy(node->penulis, penulis);
    node->tahun = tahun;
    strcpy(node->status, status);
    strcpy(node->genre, genre);
    node->left = node->right = NULL;
    node->height = 1;
    return node;
}

// Fungsi rotasi kanan
Node* rotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

    return x;
}

// Fungsi rotasi kiri
Node* rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

// Fungsi untuk mendapatkan keseimbangan node
int getBalance(Node* node) {
    return (node == NULL) ? 0 : getHeight(node->left) - getHeight(node->right);
}

// Fungsi untuk menyisipkan node baru
Node* insert(Node* node, int id_buku, char* judul, char* penulis, int tahun, char* status, char* genre) {
    if (node == NULL)
        return createNode(id_buku, judul, penulis, tahun, status, genre);

    if (id_buku < node->id_buku)
        node->left = insert(node->left, id_buku, judul, penulis, tahun, status, genre);
    else if (id_buku > node->id_buku)
        node->right = insert(node->right, id_buku, judul, penulis, tahun, status, genre);
    else
        return node;

    node->height = 1 + max(getHeight(node->left), getHeight(node->right));
    int balance = getBalance(node);

    if (balance > 1 && id_buku < node->left->id_buku)
        return rotateRight(node);
    if (balance < -1 && id_buku > node->right->id_buku)
        return rotateLeft(node);
    if (balance > 1 && id_buku > node->left->id_buku) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }
    if (balance < -1 && id_buku < node->right->id_buku) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }

    return node;
}

// Fungsi untuk mencari node dengan nilai minimum
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Fungsi untuk menghapus node
Node* deleteNode(Node* root, int id_buku) {
    if (root == NULL)
        return root;

    if (id_buku < root->id_buku)
        root->left = deleteNode(root->left, id_buku);
    else if (id_buku > root->id_buku)
        root->right = deleteNode(root->right, id_buku);
    else {
        if ((root->left == NULL) || (root->right == NULL)) {
            Node* temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else
                *root = *temp;
            free(temp);
        } else {
            Node* temp = minValueNode(root->right);
            root->id_buku = temp->id_buku;
            root->right = deleteNode(root->right, temp->id_buku);
        }
    }

    if (root == NULL)
        return root;

    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rotateRight(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return rotateLeft(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

// Fungsi untuk mencari buku berdasarkan ID
Node* search(Node* root, int id_buku) {
    if (root == NULL || root->id_buku == id_buku)
        return root;
    if (id_buku < root->id_buku)
        return search(root->left, id_buku);
    return search(root->right, id_buku);
}

// Fungsi untuk menampilkan preorder traversal tree
void preOrder(Node* root) {
    if (root != NULL) {
        printf("ID Buku: %d, Judul: %s, Penulis: %s, Tahun: %d, Status: %s, Genre: %s\n",
               root->id_buku, root->judul, root->penulis, root->tahun, root->status, root->genre);
        preOrder(root->left);
        preOrder(root->right);
    }
}

int main() {
    Node* root = NULL;
    int choice, id_buku, tahun;
    char judul[100], penulis[100], status[20], genre[50];

    do {
        printf("\n=== Menu Perpustakaan ===\n");
        printf("1. Tambah Buku\n");
        printf("2. Hapus Buku\n");
        printf("3. Cari Buku\n");
        printf("4. Tampilkan Buku (Preorder)\n");
        printf("5. Keluar\n");
        printf("Pilihan: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Masukkan ID Buku: ");
                scanf("%d", &id_buku);
                printf("Masukkan Judul Buku: ");
                scanf(" %[^\n]%*c", judul);
                printf("Masukkan Nama Penulis: ");
                scanf(" %[^\n]%*c", penulis);
                printf("Masukkan Tahun Terbit: ");
                scanf("%d", &tahun);
                printf("Masukkan Status (Tersedia/Dipinjam): ");
                scanf(" %[^\n]%*c", status);
                printf("Masukkan Genre: ");
                scanf(" %[^\n]%*c", genre);

                root = insert(root, id_buku, judul, penulis, tahun, status, genre);
                printf("Buku berhasil ditambahkan!\n");
                break;

            case 2:
                printf("Masukkan ID Buku yang ingin dihapus: ");
                scanf("%d", &id_buku);
                root = deleteNode(root, id_buku);
                printf("Buku berhasil dihapus (jika ID ditemukan)!\n");
                break;

            case 3:
                printf("Masukkan ID Buku yang ingin dicari: ");
                scanf("%d", &id_buku);
                Node* result = search(root, id_buku);
                if (result != NULL) {
                    printf("Buku ditemukan: ID Buku: %d, Judul: %s, Penulis: %s, Tahun: %d, Status: %s, Genre: %s\n",
                           result->id_buku, result->judul, result->penulis, result->tahun, result->status, result->genre);
                } else {
                    printf("Buku dengan ID %d tidak ditemukan.\n", id_buku);
                }
                break;

            case 4:
                printf("\n=== Daftar Buku (Preorder) ===\n");
                preOrder(root);
                break;

            case 5:
                printf("Keluar dari program.\n");
                break;

            default:
                printf("Pilihan tidak valid! Silakan coba lagi.\n");
                break;
        }
    } while (choice != 5); // Loop akan terus berjalan sampai pengguna memilih untuk keluar (pilihan 5)

    return 0; // Program selesai
}
