#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 100
#define PRIORITY_WEIGHT 10 // Bobot prioritas level untuk menghitung kombinasi prioritas

typedef struct {
    int task_id;
    char description[100];
    int priority_level;
    int deadline;
    char assigned_to[50];
    int combined_priority;
} Task;

Task maxHeap[MAX_TASKS];
int heapSize = 0;

// Fungsi untuk menghitung kombinasi prioritas
int calculateCombinedPriority(int priority_level, int deadline) {
    return (priority_level * PRIORITY_WEIGHT) - deadline;
}

// Fungsi untuk menukar dua elemen heap
void swap(Task *a, Task *b) {
    Task temp = *a;
    *a = *b;
    *b = temp;
}

// Heapify ke atas untuk menjaga struktur Max-Heap
void heapifyUp(int index) {
    int parent = (index - 1) / 2;
    if (index > 0 && maxHeap[index].combined_priority > maxHeap[parent].combined_priority) {
        swap(&maxHeap[index], &maxHeap[parent]);
        heapifyUp(parent);
    }
}

// Heapify ke bawah untuk menjaga struktur Max-Heap
void heapifyDown(int index) {
    int largest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < heapSize && maxHeap[left].combined_priority > maxHeap[largest].combined_priority) {
        largest = left;
    }
    if (right < heapSize && maxHeap[right].combined_priority > maxHeap[largest].combined_priority) {
        largest = right;
    }
    if (largest != index) {
        swap(&maxHeap[index], &maxHeap[largest]);
        heapifyDown(largest);
    }
}

// Fungsi untuk menambahkan task ke Max-Heap
void insertTask(int task_id, char *description, int priority_level, int deadline) {
    if (heapSize >= MAX_TASKS) {
        printf("Heap penuh, tidak bisa menambah task baru\n");
        return;
    }
    Task task;
    task.task_id = task_id;
    strcpy(task.description, description);
    task.priority_level = priority_level;
    task.deadline = deadline;
    strcpy(task.assigned_to, "Unassigned");
    task.combined_priority = calculateCombinedPriority(priority_level, deadline);

    maxHeap[heapSize] = task;
    heapifyUp(heapSize);
    heapSize++;
    printf("Task '%s' berhasil ditambahkan ke heap\n", description);
}

// Fungsi untuk meng-assign task dengan prioritas tertinggi
void assignTask(char *assigned_to) {
    if (heapSize == 0) {
        printf("Tidak ada task yang tersedia untuk diassign\n");
        return;
    }
    Task topTask = maxHeap[0];
    strcpy(topTask.assigned_to, assigned_to);
    printf("Task '%s' dengan prioritas %d diassign ke %s\n", topTask.description, topTask.combined_priority, assigned_to);

    // Menghapus task tertinggi dari heap
    maxHeap[0] = maxHeap[--heapSize];
    heapifyDown(0);
}

// Fungsi untuk meng-update task yang ada
void updateTask(int task_id, int new_priority_level, int new_deadline) {
    for (int i = 0; i < heapSize; i++) {
        if (maxHeap[i].task_id == task_id) {
            maxHeap[i].priority_level = new_priority_level;
            maxHeap[i].deadline = new_deadline;
            maxHeap[i].combined_priority = calculateCombinedPriority(new_priority_level, new_deadline);

            // Re-heapify untuk mempertahankan struktur Max-Heap
            heapifyUp(i);
            heapifyDown(i);

            printf("Task dengan ID %d telah diperbarui\n", task_id);
            return;
        }
    }
    printf("Task dengan ID %d tidak ditemukan\n", task_id);
}

// Fungsi untuk menampilkan semua task di Max-Heap
void displayTasks() {
    if (heapSize == 0) {
        printf("Tidak ada task dalam heap\n");
        return;
    }
    printf("Daftar task dalam heap:\n");
    for (int i = 0; i < heapSize; i++) {
        printf("ID: %d, Deskripsi: %s, Prioritas: %d, Deadline: %d, Assigned to: %s, Combined Priority: %d\n",
               maxHeap[i].task_id, maxHeap[i].description, maxHeap[i].priority_level,
               maxHeap[i].deadline, maxHeap[i].assigned_to, maxHeap[i].combined_priority);
    }
}

int main() {
    int choice;
    int task_id, priority_level, deadline;
    char description[100], assigned_to[50];

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert Task\n");
        printf("2. Assign Task\n");
        printf("3. Update Task\n");
        printf("4. Display Tasks\n");
        printf("5. Exit\n");
        printf("Masukkan pilihan Anda: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Masukkan ID Task: ");
                scanf("%d", &task_id);
                printf("Masukkan Deskripsi Task: ");
                getchar(); // membersihkan newline dari buffer
                fgets(description, sizeof(description), stdin);
                description[strcspn(description, "\n")] = 0; // menghapus newline di akhir
                printf("Masukkan Tingkat Prioritas: ");
                scanf("%d", &priority_level);
                printf("Masukkan Deadline (angka lebih kecil berarti lebih dekat): ");
                scanf("%d", &deadline);
                insertTask(task_id, description, priority_level, deadline);
                break;

            case 2:
                printf("Masukkan Nama yang akan di-assign: ");
                getchar();
                fgets(assigned_to, sizeof(assigned_to), stdin);
                assigned_to[strcspn(assigned_to, "\n")] = 0;
                assignTask(assigned_to);
                break;

            case 3:
                printf("Masukkan ID Task yang ingin diupdate: ");
                scanf("%d", &task_id);
                printf("Masukkan Tingkat Prioritas Baru: ");
                scanf("%d", &priority_level);
                printf("Masukkan Deadline Baru: ");
                scanf("%d", &deadline);
                updateTask(task_id, priority_level, deadline);
                break;

            case 4:
                displayTasks();
                break;

            case 5:
                printf("Keluar dari program\n");
                return 0;

            default:
                printf("Pilihan tidak valid\n");
        }
    }
}
