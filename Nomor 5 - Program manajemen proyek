#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Struktur data untuk task
typedef struct Task {
    int id_task;
    char nama_task[100];
    int prioritas; // 1 = tinggi, 2 = sedang, 3 = rendah
    char deadline[20];
    struct Task* next;
} Task;

// Fungsi untuk membuat task baru
Task* createTask(int id_task, char* nama_task, int prioritas, char* deadline) {
    Task* newTask = (Task*)malloc(sizeof(Task));
    newTask->id_task = id_task;
    strcpy(newTask->nama_task, nama_task);
    newTask->prioritas = prioritas;
    strcpy(newTask->deadline, deadline);
    newTask->next = NULL;
    return newTask;
}

// Fungsi untuk menampilkan semua task
void displayTasks(Task* head) {
    if (head == NULL) {
        printf("Tidak ada task yang tersedia.\n");
        return;
    }
    
    Task* temp = head;
    printf("\n=== Daftar Task ===\n");
    while (temp != NULL) {
        printf("ID Task: %d, Nama Task: %s, Prioritas: %d, Deadline: %s\n",
               temp->id_task, temp->nama_task, temp->prioritas, temp->deadline);
        temp = temp->next;
    }
}

// Fungsi untuk menambahkan task
Task* insertTask(Task* head, int id_task, char* nama_task, int prioritas, char* deadline) {
    Task* newTask = createTask(id_task, nama_task, prioritas, deadline);
    if (head == NULL) {
        return newTask;
    }
    Task* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTask;
    return head;
}

// Fungsi untuk assign task
void assignTask(Task* head, int id_task) {
    Task* temp = head;
    while (temp != NULL) {
        if (temp->id_task == id_task) {
            printf("Task '%s' dengan ID %d telah ditugaskan.\n", temp->nama_task, temp->id_task);
            return;
        }
        temp = temp->next;
    }
    printf("Task dengan ID %d tidak ditemukan.\n", id_task);
}

// Fungsi untuk update task
void updateTask(Task* head, int id_task) {
    Task* temp = head;
    while (temp != NULL) {
        if (temp->id_task == id_task) {
            printf("Masukkan nama task baru: ");
            scanf(" %[^\n]%*c", temp->nama_task);
            printf("Masukkan tingkat prioritas baru (1=tinggi, 2=sedang, 3=rendah): ");
            scanf("%d", &temp->prioritas);
            printf("Masukkan deadline baru: ");
            scanf(" %[^\n]%*c", temp->deadline);
            printf("Task dengan ID %d telah diperbarui.\n", id_task);
            return;
        }
        temp = temp->next;
    }
    printf("Task dengan ID %d tidak ditemukan.\n", id_task);
}

int main() {
    Task* head = NULL;
    int choice, id_task, prioritas;
    char nama_task[100], deadline[20];

    do {
        // Menampilkan menu
        printf("\n=== Menu Manajemen Proyek ===\n");
        printf("1. Insert Task\n");
        printf("2. Assign Task\n");
        printf("3. Update Task\n");
        printf("4. Tampilkan Semua Task\n");
        printf("5. Keluar\n");
        printf("Pilihan: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Insert Task
                printf("Masukkan ID Task: ");
                scanf("%d", &id_task);
                printf("Masukkan Nama Task: ");
                scanf(" %[^\n]%*c", nama_task);  // Memasukkan string dengan spasi
                printf("Masukkan Tingkat Prioritas (1=tinggi, 2=sedang, 3=rendah): ");
                scanf("%d", &prioritas);
                printf("Masukkan Deadline (format: dd/mm/yyyy): ");
                scanf(" %[^\n]%*c", deadline);
                head = insertTask(head, id_task, nama_task, prioritas, deadline);
                printf("Task berhasil ditambahkan!\n");
                break;

            case 2: // Assign Task
                printf("Masukkan ID Task yang ingin ditugaskan: ");
                scanf("%d", &id_task);
                assignTask(head, id_task);
                break;

            case 3: // Update Task
                printf("Masukkan ID Task yang ingin diperbarui: ");
                scanf("%d", &id_task);
                updateTask(head, id_task);
                break;

            case 4: // Tampilkan Semua Task
                displayTasks(head);
                break;

            case 5: // Keluar
                printf("Keluar dari program.\n");
                break;

            default:
                printf("Pilihan tidak valid! Silakan coba lagi.\n");
        }
    } while (choice != 5); // Loop akan terus berjalan sampai pengguna memilih untuk keluar (pilihan 5)

    return 0;
}
